package com.eliteams.quick4j.test.dao;

import java.io.FileOutputStream;
import java.io.OutputStreamWriter;
import java.text.SimpleDateFormat;
import java.util.Calendar;

public class ToNwk11 {

    public static void main(String[] args) {
        StringBuffer sb = new StringBuffer();

        sb.append("//" + " Created" + "\t"+": ");
        String datea = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(Calendar.getInstance().getTime());
        sb.append(datea);
        sb.append("\r\n");
        sb.append("//" + " DLL id" + "\t"+": ");
        sb.append("C:\\Program Files\\DHI\\2014\\bin\\pfs2004.dll");//服务器的DHI地址；
        sb.append("\r\n");
        sb.append("//" + " PFS version"+"  : Feb  "  +"4 2015 19:27:20");
        sb.append("\r\n");
        sb.append("\r\n");
        sb.append("[MIKE_11_Network_editor]");
        sb.append("\r\n");
        sb.append("   [FORMAT_VERSION]");
        sb.append("\r\n");
        sb.append("      verno = 115");
        sb.append("\r\n");
        sb.append("   EndSect  // FORMAT_VERSION");
        sb.append("\r\n");
        sb.append("   [DATA_AREA]");
        sb.append("\r\n");
        sb.append("      x0 = 591000");
        sb.append("\r\n");
        sb.append("      y0 = 4598999");
        sb.append("\r\n");
        sb.append("      x1 = 620000");
        sb.append("\r\n");
        sb.append("      y1 = 4636900");
        sb.append("\r\n");
        sb.append("      projection = 'NON-UTM'");
        sb.append("\r\n");
        sb.append("   EndSect  // DATA_AREA");
        sb.append("\r\n");
        sb.append("\r\n");
        sb.append("   [POINTS]");
        sb.append("\r\n");
        sb.append("      point = 1, 599124.2066469104, 4599159.524668021, 1, 0, 0");
        sb.append("\r\n");
        sb.append("   EndSect  // POINTS");
        sb.append("\r\n");
        sb.append("\r\n");
        sb.append("   [BRANCHES]");
        sb.append("\r\n");
        sb.append("      [branch]");
        sb.append("\r\n");
        sb.append("         definitions = '社河', '2016', 0, 53730, 0, 10000, 0");
        sb.append("\r\n");
        sb.append("         connections = '', -1e-155, '', -1e-155");
        sb.append("\r\n");
        sb.append("         points = 1");
        sb.append("\r\n");
        sb.append("      EndSect  // branch");
        sb.append("\r\n");
        sb.append("\r\n");
        sb.append("   EndSect  // BRANCHES");
        sb.append("\r\n");
        sb.append("\r\n");
        sb.append("   [STRUCTURE_MODULE]");
        sb.append("\r\n");
        sb.append("      Structure_Version = 1, 1");
        sb.append("\r\n");
        sb.append("      [CROSSSECTIONS]");
        sb.append("\r\n");
        sb.append("         CrossSectionDataBridge = 'xns11'");
        sb.append("\r\n");
        sb.append("         CrossSectionFile = ||");
        sb.append("\r\n");
        sb.append("      EndSect  // CROSSSECTIONS");
        sb.append("\r\n");
        sb.append("\r\n");
        sb.append("      [WEIR]");
        sb.append("\r\n");
        sb.append("      EndSect  // WEIR");
        sb.append("\r\n");
        sb.append("\r\n");
        sb.append("      [CULVERTS]");
        sb.append("\r\n");
        sb.append("      EndSect  // CULVERTS");
        sb.append("\r\n");
        sb.append("\r\n");
        sb.append("      [PUMPS]");
        sb.append("\r\n");
        sb.append("      EndSect  // PUMPS");
        sb.append("\r\n");
        sb.append("\r\n");
        sb.append("      [REGULATING_STR]");
        sb.append("\r\n");
        sb.append("      EndSect  // REGULATING_STR");
        sb.append("\r\n");
        sb.append("\r\n");
        sb.append("      [CONTROL_STR]");
        sb.append("\r\n");
        sb.append("      EndSect  // CONTROL_STR");
        sb.append("\r\n");
        sb.append("\r\n");
        sb.append("      [DAMBREAK_STR]");
        sb.append("\r\n");
        sb.append("      EndSect  // DAMBREAK_STR");
        sb.append("\r\n");
        sb.append("\r\n");
        sb.append("      [BRIDGE]");
        sb.append("\r\n");
        sb.append("      EndSect  // BRIDGE");
        sb.append("\r\n");
        sb.append("\r\n");
        sb.append("      [USER_DEFINED]");
        sb.append("\r\n");
        sb.append("      EndSect  // USER_DEFINED");
        sb.append("\r\n");
        sb.append("\r\n");
        sb.append("      [TABULATED]");
        sb.append("\r\n");
        sb.append("      EndSect  // TABULATED");
        sb.append("\r\n");
        sb.append("\r\n");
        sb.append("      [ENERGYBALANCE]");
        sb.append("\r\n");
        sb.append("      EndSect  // ENERGYBALANCE");
        sb.append("\r\n");
        sb.append("\r\n");
        sb.append("      [MIKE12_HYDRAU]");
        sb.append("\r\n");
        sb.append("      EndSect  // MIKE12_HYDRAU");
        sb.append("\r\n");
        sb.append("\r\n");
        sb.append("   EndSect  // STRUCTURE_MODULE");
        sb.append("\r\n");
        sb.append("\r\n");
        sb.append("   [CATCHMENT]");
        sb.append("\r\n");
        sb.append("   EndSect  // CATCHMENT");
        sb.append("\r\n");
        sb.append("\r\n");
        sb.append("   [COMPUTATIONAL_SETUP]");
        sb.append("\r\n");
        sb.append("      SaveAllGridPoints = true");
        sb.append("\r\n");
        sb.append("   EndSect  // COMPUTATIONAL_SETUP");
        sb.append("\r\n");
        sb.append("\r\n");
        sb.append("   [MIKESHECOUPLING]");
        sb.append("\r\n");
        sb.append("   EndSect  // MIKESHECOUPLING");
        sb.append("\r\n");
        sb.append("\r\n");
        sb.append("   [CHANNELROUTING]");
        sb.append("\r\n");
        sb.append("   EndSect  // CHANNELROUTING");
        sb.append("\r\n");
        sb.append("   [FLOOD_QQ]");
        sb.append("\r\n");
        sb.append("   EndSect  // FLOOD_QQ");
        sb.append("\r\n");
        sb.append("   [FLOOD_HQ]");
        sb.append("\r\n");
        sb.append("   EndSect  // FLOOD_HQ");
        sb.append("\r\n");
        sb.append("\r\n");
        sb.append("   [FLOOD_ORIFICE]");
        sb.append("\r\n");
        sb.append("   EndSect  // FLOOD_ORIFICE");
        sb.append("\r\n");
        sb.append("\r\n");
        sb.append("   [DIVERSION]");
        sb.append("\r\n");
        sb.append("   EndSect  // DIVERSION");
        sb.append("\r\n");
        sb.append("\r\n");
        sb.append("   [ALIGNMENTLINE]");
        sb.append("\r\n");
        sb.append("   EndSect  // ALIGNMENTLINE");
        sb.append("\r\n");
        sb.append("\r\n");
        sb.append("   [JUNCTION]");
        sb.append("\r\n");
        sb.append("   EndSect  // JUNCTION");
        sb.append("\r\n");
        sb.append("\r\n");
        sb.append("   [MIKE11_ROUTING]");
        sb.append("\r\n");
        sb.append("   EndSect  // MIKE11_ROUTING");
        sb.append("\r\n");
        sb.append("\r\n");
        sb.append("   [MODFLOW]");
        sb.append("\r\n");
        sb.append("      CalculateLevels = 0");
        sb.append("\r\n");
        sb.append("   EndSect  // MODFLOW");
        sb.append("\r\n");
        sb.append("\r\n");
        sb.append("   [LAYER_FILES]");
        sb.append("\r\n");
        sb.append("      DataFileName = 1, |..\\社河shp\\社河干流投影.shp|, 'ID'");
        sb.append("\r\n");
        sb.append("      AxisUnit = 1000");
        sb.append("\r\n");
        sb.append("      [PROPERTIES]");
        sb.append("\r\n");
        sb.append("         [MIKEZero_Shape_Polygon_Object]");
        sb.append("\r\n");
        sb.append("\r\n");
        sb.append("            Base_Title = 'Shape Polylines'");
        sb.append("\r\n");
        sb.append("            Base_Reg_Key = ''");
        sb.append("\r\n");
        sb.append("            Base_Col_Red = 0");
        sb.append("\r\n");
        sb.append("            Base_Col_Green = 0");
        sb.append("\r\n");
        sb.append("            Base_Col_Blue = 0");
        sb.append("\r\n");
        sb.append("            Base_Display_On = true");
        sb.append("\r\n");
        sb.append("            Line_Thickness = 0.12");
        sb.append("\r\n");
        sb.append("            Line_Style = 0");
        sb.append("\r\n");
        sb.append("            Line_Polygon_Style = 0");
        sb.append("\r\n");
        sb.append("            Draw_Text = true");
        sb.append("\r\n");
        sb.append("            Text_Color_Style = 0");
        sb.append("\r\n");
        sb.append("            Text_Color = 0, 0, 0");
        sb.append("\r\n");
        sb.append("            Text_Bk_Mode = 1");
        sb.append("\r\n");
        sb.append("         EndSect  // MIKEZero_Shape_Polygon_Object");
        sb.append("\r\n");
        sb.append("\r\n");
        sb.append("         ProjectionType = 'NON-UTM'");
        sb.append("\r\n");
        sb.append("         OverlayDrawingOrder = 0");
        sb.append("\r\n");
        sb.append("      EndSect  // PROPERTIES");
        sb.append("\r\n");
        sb.append("\r\n");
        sb.append("   EndSect  // LAYER_FILES");
        sb.append("\r\n");
        sb.append("\r\n");
        sb.append("EndSect  // MIKE_11_Network_editor");

        String dateb = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(Calendar.getInstance().getTime());
        String date = dateb.replaceAll("[[\\s-:punct:]]", "");

        // File f = new File("C:\\Users\\Administrator\\Desktop" + "\\" + "ad11" + date + ".ad11");//新建文件
        try {

            OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream("C:\\Users\\Administrator\\Desktop" + "\\" + "nwk11" + date + ".nwk11"));
            osw = new OutputStreamWriter(new FileOutputStream("C:\\Users\\Administrator\\Desktop" + "\\" + "nwk11" + date + ".nwk11", true), "GBK");
            osw.write(String.valueOf(sb));
            osw.flush();
            osw.close();
            System.out.println("nwk11文件生成成功");

        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
}
